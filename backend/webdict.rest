### Generate Admin Authentication token
POST {{host}}/v1/api/auth/signin
Content-Type: application/json

{
  "email": "{{adminEmail}}",
  "password": "{{adminPassword}}"
}

> {%
client.global.set("admin_auth_token", response.body.accessToken)
client.global.set("admin_auth_type", response.body.type)
 %}

### Crete User
POST {{host}}/v1/api/users
Content-Type: application/json
Authorization: {{admin_auth_type}} {{admin_auth_token}}

{
  "name": "test",
  "email": "{{userEmail}}",
  "password": "testPasswd",
  "role": 2
}

> {%
client.test("Request executed successfully", function () {
    client.assert(response.status === 201, "Response status is not 201")
    client.assert(response.body.hasOwnProperty("id"), "ID is present")
})
client.global.set("user_id", response.body.id)
 %}

### Crete User - Nagative case, can not crete new user with the same email
POST {{host}}/v1/api/users
Content-Type: application/json
Authorization: {{admin_auth_type}} {{admin_auth_token}}

{
  "name": "test1",
  "email": "{{userEmail}}",
  "password": "testPasswd",
  "role": 2
}

> {%
    client.test("Request executed successfully", function () {
        client.assert(response.status === 400, "Response status is not 400")
    })
%}

### Update User
PUT {{host}}/v1/api/users/{{user_id}}
Content-Type: application/json
Authorization: {{admin_auth_type}} {{admin_auth_token}}

{
  "name": "John Do",
  "email": "{{userEmail}}",
  "password": "{{userPassword}}",
  "role": 2
}

> {%
client.test("Request executed successfully", function () {
    client.assert(response.status === 200, "Response status is not 200")
})
 %}

### Get user by ID
GET {{host}}/v1/api/users/{{user_id}}
Content-Type: application/json
Authorization: {{admin_auth_type}} {{admin_auth_token}}

> {%
client.test("Request executed successfully", function () {
    client.assert(response.status === 200, "Response status is not 200")
})
client.test("Response body is correct", function () {
    client.assert(response.body.hasOwnProperty("id"), "Tag ID is not present")
    client.assert(response.body.name === "John Do", "name from get user by id is not correct")
})
 %}

### Get all users
GET {{host}}/v1/api/users
Content-Type: application/json
Authorization: {{admin_auth_type}} {{admin_auth_token}}

> {%
client.test("Request executed successfully", function () {
    client.assert(response.status === 200, "Response status is not 200")
})
client.test("Response body is correct", function () {
    client.assert(response.body.length === 2, "Amount of users is not correct")
})
 %}

### Generate Author Authentication token
POST {{host}}/v1/api/auth/signin
Content-Type: application/json

{
  "email": "{{userEmail}}",
  "password": "{{userPassword}}"
}

> {%
client.global.set("user_auth_token", response.body.accessToken)
client.global.set("user_auth_type", response.body.type)
 %}

### Crete Lang
POST {{host}}/v1/api/langs
Content-Type: application/json
Authorization: {{user_auth_type}} {{user_auth_token}}

{
  "name": "DE"
}

> {%
    client.test("Request executed successfully", function () {
        client.assert(response.status === 201, "Response status is not 201")
        client.assert(response.body.hasOwnProperty("id"), "ID is present")
    })
    client.global.set("lang_id", response.body.id)
%}

### Crete Lang -  Nagative case, can not crete new lane with the same name
POST {{host}}/v1/api/langs
Content-Type: application/json
Authorization: {{user_auth_type}} {{user_auth_token}}

{
  "name": "DE"
}

> {%
    client.test("Request executed successfully", function () {
        client.assert(response.status === 400, "Response status is not 400")
    })
%}

### Get lang by ID
GET {{host}}/v1/api/langs/{{lang_id}}
Content-Type: application/json
Authorization: {{user_auth_type}} {{user_auth_token}}

> {%
    client.test("Request executed successfully", function () {
        client.assert(response.status === 200, "Response status is not 200")
    })
    client.test("Response body is correct", function () {
        client.assert(response.body.hasOwnProperty("id"), "Lang ID is not present")
        client.assert(response.body.name === "DE", "name from get lang by id is not correct")
    })
%}

### Update Lang
PUT {{host}}/v1/api/langs/{{lang_id}}
Content-Type: application/json
Authorization: {{user_auth_type}} {{user_auth_token}}

{
  "name": "EN"
}

> {%
    client.test("Request executed successfully", function () {
        client.assert(response.status === 200, "Response status is not 200")
    })
%}

### Crete another Lang
POST {{host}}/v1/api/langs
Content-Type: application/json
Authorization: {{user_auth_type}} {{user_auth_token}}

{
  "name": "SP"
}

> {%
    client.test("Request executed successfully", function () {
        client.assert(response.status === 201, "Response status is not 201")
        client.assert(response.body.hasOwnProperty("id"), "ID is present")
    })
    client.global.set("lang2_id", response.body.id)
%}

### Get all langs
GET {{host}}/v1/api/langs
Content-Type: application/json
Authorization: {{user_auth_type}} {{user_auth_token}}

> {%
    client.test("Request executed successfully", function () {
        client.assert(response.status === 200, "Response status is not 200")
    })
    client.test("Response body is correct", function () {
        client.assert(function() {
            const langs = response.body
            return langs.every(lang => ["EN", "SP"].includes(lang.name))
        }(), "all languages are not correct")
    })
%}

### Delete lang
DELETE {{host}}/v1/api/langs/{{lang2_id}}
Content-Type: application/json
Authorization: {{user_auth_type}} {{user_auth_token}}

> {%
    client.test("Request executed successfully", function () {
        client.assert(response.status === 200, "Response status is not 200")
    })
%}

### Get all langs
GET {{host}}/v1/api/langs
Content-Type: application/json
Authorization: {{user_auth_type}} {{user_auth_token}}

> {%
    client.test("Request executed successfully", function () {
        client.assert(response.status === 200, "Response status is not 200")
    })
    client.test("Response body is correct", function () {
        client.assert(response.body.length === 1, "Amount of langs is not correct")
        client.assert(response.body[0].name === "EN", "Lang from get tag by id is not correct")
    })
%}

### Crete tag
POST {{host}}/v1/api/tags
Content-Type: application/json
Authorization: {{user_auth_type}} {{user_auth_token}}

{
  "tag": "test"
}

> {%
client.test("Request executed successfully", function () {
    client.assert(response.status === 201, "Response status is not 201")
    client.assert(response.body.hasOwnProperty("id"), "ID is present")
})
client.global.set("tag1_id", response.body.id)
 %}

### Crete tag - Nagative case, can not crete new tag with the same tag
POST {{host}}/v1/api/tags
Content-Type: application/json
Authorization: {{user_auth_type}} {{user_auth_token}}

{
  "tag": "test"
}

> {%
    client.test("Request executed successfully", function () {
        client.assert(response.status === 400, "Response status is not 400")
    })
%}

### Error on create already existing tag
# Frontend app should receive 400 error code to be able to show for user error message
POST {{host}}/v1/api/tags
Content-Type: application/json
Authorization: {{user_auth_type}} {{user_auth_token}}

{
  "tag": "test"
}

> {%
    client.test("Request executed successfully", function () {
        client.assert(response.status === 400, "Response status is not 400")
        client.assert(response.body == "tag test already exists", "error message is not correct")
    })
%}

### Update tag
PUT {{host}}/v1/api/tags/{{tag1_id}}
Content-Type: application/json
Authorization: {{user_auth_type}} {{user_auth_token}}

{
  "tag": "Programming"
}

> {%
client.test("Request executed successfully", function () {
    client.assert(response.status === 200, "Response status is not 200")
})
 %}

### Get all tags
GET {{host}}/v1/api/tags
Content-Type: application/json
Authorization: {{user_auth_type}} {{user_auth_token}}

> {%
client.test("Request executed successfully", function () {
    client.assert(response.status === 200, "Response status is not 200")
})
client.test("Response body is correct", function () {
    client.assert(response.body.length === 1, "Amount of tags")
    client.assert(response.body[0].tag === "Programming", "Tag from get tag by id is not correct")
})
 %}

### Get tag by ID
GET {{host}}/v1/api/tags/{{tag1_id}}
Content-Type: application/json
Authorization: {{user_auth_type}} {{user_auth_token}}

> {%
client.test("Request executed successfully", function () {
    client.assert(response.status === 200, "Response status is not 200")
})
client.test("Response body is correct", function () {
    client.assert(response.body.hasOwnProperty("id"), "Tag ID is not present")
    client.assert(response.body.tag === "Programming", "Tag from get tag by id is not correct")
})
 %}

### Crete tag2
POST {{host}}/v1/api/tags
Content-Type: application/json
Authorization: {{user_auth_type}} {{user_auth_token}}

{
  "tag": "Tech"
}

> {%
    client.test("Request executed successfully", function () {
        client.assert(response.status === 201, "Response status is not 201")
        client.assert(response.body.hasOwnProperty("id"), "ID is present")
    })
    client.global.set("tag2_id", response.body.id)
%}


### Get all tags
GET {{host}}/v1/api/tags
Content-Type: application/json
Authorization: {{user_auth_type}} {{user_auth_token}}

> {%
    client.test("Request executed successfully", function () {
        client.assert(response.status === 200, "Response status is not 200")
    })
    client.test("Response body is correct", function () {
        client.assert(response.body.length === 2, "Amount of tags is not correct")
        client.assert(function() {
            const tags = response.body.map(x => x.tag)
            return tags.every(tag => ["Programming", "Tech"].includes(tag))
        }(), "Tags from get all tags are not correct")
    })
%}

### Create Translation
POST {{host}}/v1/api/translations
Content-Type: application/json
Authorization: {{user_auth_type}} {{user_auth_token}}

{
  "source": "test",
  "transcription": "test",
  "target": "test",
  "example": "test",
  "lang_id": "{{lang_id}}"
}

> {%
client.test("Request executed successfully", function () {
    client.assert(response.status === 201, "Response status is not 201")
    client.assert(response.body.hasOwnProperty("id"), "ID is not present")
})
client.global.set("translation1_id", response.body.id)
 %}

### Create Translation - Nagative case, can not crete new translation with the same source
POST {{host}}/v1/api/translations
Content-Type: application/json
Authorization: {{user_auth_type}} {{user_auth_token}}

{
  "source": "test",
  "transcription": "test",
  "target": "test",
  "example": "test",
  "lang_id": "{{lang_id}}"
}

> {%
    client.test("Request executed successfully", function () {
        client.assert(response.status === 400, "Response status is not 400")
    })
%}

### Update translation
PUT {{host}}/v1/api/translations/{{translation1_id}}
Content-Type: application/json
Authorization: {{user_auth_type}} {{user_auth_token}}

{
  "source": "Give it a shot",
  "transcription": "[n/a]",
  "target": "Попробовать",
  "example": "Just give it a shot",
  "tag_ids": ["{{tag1_id}}", "{{tag2_id}}"],
  "lang_id": "{{lang_id}}"
}

> {%
client.test("Request executed successfully", function () {
    client.assert(response.status === 200, "Response status is not 200")
})
 %}

### Get translation by ID
GET {{host}}/v1/api/translations/{{translation1_id}}
Content-Type: application/json
Authorization: {{user_auth_type}} {{user_auth_token}}

> {%
client.test("Request executed successfully", function () {
    client.assert(response.status === 200, "Response status is not 200")
})
client.test("Response body is correct", function () {
    client.assert(response.body.hasOwnProperty("id"), "Translation ID is not present")
    client.assert(response.body.hasOwnProperty("created_at"), "Translation created_at is not present")
    client.assert(response.body.source === "Give it a shot", "source from get translation by id is not correct")
    client.assert(response.body.transcription === "[n/a]", "transcription from get translation by id is not correct")
    client.assert(response.body.target === "Попробовать", "translation from get translation by id is not correct")
    client.assert(response.body.lang.name === "EN", "translation language from get translation by id is not correct")
    client.assert(response.body.example === "Just give it a shot", "example from get translation by id is not correct")
    client.assert(response.body.tags.length === 2, "Amount of tags from get translation by id is not correct")
    client.assert(function() {
        const tags = response.body.tags.map(x => x.tag)
        return tags.every(tag => ["Programming", "Tech"].includes(tag))
    }(), "Amount of tags from get translation by id is not correct")
})
 %}

### Create Second Translation
POST {{host}}/v1/api/translations
Content-Type: application/json
Authorization: {{user_auth_type}} {{user_auth_token}}

{
  "source": "test2",
  "transcription": "test2",
  "target": "test2",
  "example": "test2",
  "tag_ids": ["{{tag1_id}}", "{{tag2_id}}"],
  "lang_id": "{{lang_id}}"
}

> {%
    client.test("Request executed successfully", function () {
        client.assert(response.status === 201, "Response status is not 201")
        client.assert(response.body.hasOwnProperty("id"), "ID is not present")
    })
    client.global.set("translation2_id", response.body.id)

%}

### Create Translation without tags
POST {{host}}/v1/api/translations
Content-Type: application/json
Authorization: {{user_auth_type}} {{user_auth_token}}

{
  "source": "test3",
  "transcription": "test3",
  "target": "test3",
  "example": "test3",
  "lang_id": "{{lang_id}}"
}

> {%
    client.test("Request executed successfully", function () {
        client.assert(response.status === 201, "Response status is not 201")
        client.assert(response.body.hasOwnProperty("id"), "ID is not present")
    })
%}

### Get Last Translations
GET {{host}}/v1/api/translations/last?pageSize=1&page=1&tagId={{tag1_id}}&tagId={{tag2_id}}&langId={{lang_id}}
Content-Type: application/json
Authorization: {{user_auth_type}} {{user_auth_token}}

> {%
    client.test("Request executed successfully", function () {
        client.assert(response.status === 200, "Response status is not 200")
    })
    client.test("Response body is correct", function () {
        client.assert(response.body.hasOwnProperty("translations"), "Translations are not present")
        client.assert(response.body.hasOwnProperty("total_pages"), "Translation created_at is not present")
        client.assert(response.body.total_pages === 2, "amount of pages is not correct")
        client.assert(response.body.translations[0].source === "test2", "Ordering of last translations is not correct")
        client.assert(response.body.translations[0].transcription === "test2", "Ordering of last translations is not correct")
        client.assert(response.body.translations[0].target === "test2", "Ordering of last translations is not correct")
    })
%}

### Delete translation1
DELETE {{host}}/v1/api/translations/{{translation1_id}}
Content-Type: application/json
Authorization: {{user_auth_type}} {{user_auth_token}}

> {%
client.test("Request executed successfully", function () {
    client.assert(response.status === 200, "Response status is not 200")
})
 %}

### Delete translation2
DELETE {{host}}/v1/api/translations/{{translation2_id}}
Content-Type: application/json
Authorization: {{user_auth_type}} {{user_auth_token}}

> {%
    client.test("Request executed successfully", function () {
        client.assert(response.status === 200, "Response status is not 200")
    })
%}

### Delete tag
DELETE {{host}}/v1/api/tags/{{tag1_id}}
Content-Type: application/json
Authorization: {{user_auth_type}} {{user_auth_token}}

> {%
client.test("Request executed successfully", function () {
    client.assert(response.status === 200, "Response status is not 200")
})
 %}

### Get Last Translations
GET {{host}}/v1/api/translations/last?pageSize=1&page=1&tagId={{tag1_id}}&tagId={{tag2_id}}&langId={{lang_id}}
Content-Type: application/json
Authorization: {{user_auth_type}} {{user_auth_token}}

> {%
    client.test("Request executed successfully", function () {
        client.assert(response.status === 200, "Response status is not 200")
    })
    client.test("Response body is correct", function () {
        client.assert(response.body.hasOwnProperty("translations"), "Translations are not present")
        client.assert(response.body.hasOwnProperty("total_pages"), "Translation created_at is not present")
        client.assert(response.body.total_pages === 0, "Amount of pages is not correct")
        client.assert(response.body.translations.length === 0, "Amount of translations is not correct")
    })
%}

### Check home page
GET {{host}}

> {%
    client.test("Request executed successfully", function () {
        client.assert(response.status === 200, "Response status is not 200")
    })
    client.test("Response body is correct", function () {
        client.assert(response.body.search("<title>Test Page</title>") !== -1, "Static data from index.html is not correct")
    })
%}
