// Code generated by mockery v2.14.0. DO NOT EDIT.

package tag

import mock "github.com/stretchr/testify/mock"

// mockery --name=Repository --filename=repository_mock.go --output=./ --structname=MockRepository --inpackage
// MockRepository is an autogenerated mock type for the Repository type
type MockRepository struct {
	mock.Mock
}

// AllExist provides a mock function with given fields: ids, authorID
func (_m *MockRepository) AllExist(ids []string, authorID string) (bool, error) {
	ret := _m.Called(ids, authorID)

	var r0 bool
	if rf, ok := ret.Get(0).(func([]string, string) bool); ok {
		r0 = rf(ids, authorID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func([]string, string) error); ok {
		r1 = rf(ids, authorID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Create provides a mock function with given fields: tag
func (_m *MockRepository) Create(tag *Tag) error {
	ret := _m.Called(tag)

	var r0 error
	if rf, ok := ret.Get(0).(func(*Tag) error); ok {
		r0 = rf(tag)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: id, authorID
func (_m *MockRepository) Delete(id string, authorID string) error {
	ret := _m.Called(id, authorID)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(id, authorID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: id, authorID
func (_m *MockRepository) Get(id string, authorID string) (*Tag, error) {
	ret := _m.Called(id, authorID)

	var r0 *Tag
	if rf, ok := ret.Get(0).(func(string, string) *Tag); ok {
		r0 = rf(id, authorID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Tag)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(id, authorID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: tag
func (_m *MockRepository) Update(tag *Tag) error {
	ret := _m.Called(tag)

	var r0 error
	if rf, ok := ret.Get(0).(func(*Tag) error); ok {
		r0 = rf(tag)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewMockRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockRepository creates a new instance of MockRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockRepository(t mockConstructorTestingTNewMockRepository) *MockRepository {
	mock := &MockRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
