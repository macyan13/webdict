// Code generated by mockery v2.14.0. DO NOT EDIT.

package user

import (
	mock "github.com/stretchr/testify/mock"
)

// MockRepository is an autogenerated mock type for the MockRepository type
type MockRepository struct {
	mock.Mock
}

// Exist provides a mock function with given fields: id
func (_m *MockRepository) Exist(id string) bool {
	ret := _m.Called(id)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// GetByEmail provides a mock function with given fields: email
func (_m *MockRepository) GetByEmail(email string) *User {
	ret := _m.Called(email)

	var r0 *User
	if rf, ok := ret.Get(0).(func(string) *User); ok {
		r0 = rf(email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*User)
		}
	}

	return r0
}

// Save provides a mock function with given fields: _a0
func (_m *MockRepository) Save(_a0 *User) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(*User) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewRepository creates a new instance of MockRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewRepository(t mockConstructorTestingTNewRepository) *MockRepository {
	mock := &MockRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
