// Code generated by mockery v2.23.1. DO NOT EDIT.

package translation

import mock "github.com/stretchr/testify/mock"

// mockery --name=Repository --filename=repository_mock.go --output=./ --structname=MockRepository --inpackage
// MockRepository is an autogenerated mock type for the Repository type
type MockRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: translation
func (_m *MockRepository) Create(translation *Translation) error {
	ret := _m.Called(translation)

	var r0 error
	if rf, ok := ret.Get(0).(func(*Translation) error); ok {
		r0 = rf(translation)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: id, authorID
func (_m *MockRepository) Delete(id string, authorID string) error {
	ret := _m.Called(id, authorID)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(id, authorID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteByAuthorID provides a mock function with given fields: authorID
func (_m *MockRepository) DeleteByAuthorID(authorID string) (int, error) {
	ret := _m.Called(authorID)

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (int, error)); ok {
		return rf(authorID)
	}
	if rf, ok := ret.Get(0).(func(string) int); ok {
		r0 = rf(authorID)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(authorID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ExistByLang provides a mock function with given fields: langID, authorID
func (_m *MockRepository) ExistByLang(langID string, authorID string) (bool, error) {
	ret := _m.Called(langID, authorID)

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (bool, error)); ok {
		return rf(langID, authorID)
	}
	if rf, ok := ret.Get(0).(func(string, string) bool); ok {
		r0 = rf(langID, authorID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(langID, authorID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ExistByTag provides a mock function with given fields: tagID, authorID
func (_m *MockRepository) ExistByTag(tagID string, authorID string) (bool, error) {
	ret := _m.Called(tagID, authorID)

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (bool, error)); ok {
		return rf(tagID, authorID)
	}
	if rf, ok := ret.Get(0).(func(string, string) bool); ok {
		r0 = rf(tagID, authorID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(tagID, authorID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Get provides a mock function with given fields: id, authorID
func (_m *MockRepository) Get(id string, authorID string) (*Translation, error) {
	ret := _m.Called(id, authorID)

	var r0 *Translation
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (*Translation, error)); ok {
		return rf(id, authorID)
	}
	if rf, ok := ret.Get(0).(func(string, string) *Translation); ok {
		r0 = rf(id, authorID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Translation)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(id, authorID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: translation
func (_m *MockRepository) Update(translation *Translation) error {
	ret := _m.Called(translation)

	var r0 error
	if rf, ok := ret.Get(0).(func(*Translation) error); ok {
		r0 = rf(translation)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewMockRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockRepository creates a new instance of MockRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockRepository(t mockConstructorTestingTNewMockRepository) *MockRepository {
	mock := &MockRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
