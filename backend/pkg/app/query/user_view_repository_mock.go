// Code generated by mockery v2.14.0. DO NOT EDIT.

package query

import mock "github.com/stretchr/testify/mock"

// mockery --name=UserViewRepository --filename=user_view_repository_mock.go --output=./ --structname=MockUserViewRepository --inpackage
// MockUserViewRepository is an autogenerated mock type for the UserViewRepository type
type MockUserViewRepository struct {
	mock.Mock
}

// GetAllViews provides a mock function with given fields:
func (_m *MockUserViewRepository) GetAllViews() ([]UserView, error) {
	ret := _m.Called()

	var r0 []UserView
	if rf, ok := ret.Get(0).(func() []UserView); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]UserView)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetView provides a mock function with given fields: id
func (_m *MockUserViewRepository) GetView(id string) (UserView, error) {
	ret := _m.Called(id)

	var r0 UserView
	if rf, ok := ret.Get(0).(func(string) UserView); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(UserView)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewMockUserViewRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockUserViewRepository creates a new instance of MockUserViewRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockUserViewRepository(t mockConstructorTestingTNewMockUserViewRepository) *MockUserViewRepository {
	mock := &MockUserViewRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
