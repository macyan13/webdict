// Code generated by mockery v2.14.0. DO NOT EDIT.

package query

import mock "github.com/stretchr/testify/mock"

// mockery --name=TranslationViewRepository --filename=translation_view_repository_mock.go --output=./ --structname=MockTranslationViewRepository --inpackage
// MockTranslationViewRepository is an autogenerated mock type for the TranslationViewRepository type
type MockTranslationViewRepository struct {
	mock.Mock
}

// GetLastViews provides a mock function with given fields: authorID, limit
func (_m *MockTranslationViewRepository) GetLastViews(authorID string, limit int) ([]TranslationView, error) {
	ret := _m.Called(authorID, limit)

	var r0 []TranslationView
	if rf, ok := ret.Get(0).(func(string, int) []TranslationView); ok {
		r0 = rf(authorID, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]TranslationView)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, int) error); ok {
		r1 = rf(authorID, limit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetView provides a mock function with given fields: id, authorID
func (_m *MockTranslationViewRepository) GetView(id string, authorID string) (TranslationView, error) {
	ret := _m.Called(id, authorID)

	var r0 TranslationView
	if rf, ok := ret.Get(0).(func(string, string) TranslationView); ok {
		r0 = rf(id, authorID)
	} else {
		r0 = ret.Get(0).(TranslationView)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(id, authorID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewMockTranslationViewRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockTranslationViewRepository creates a new instance of MockTranslationViewRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockTranslationViewRepository(t mockConstructorTestingTNewMockTranslationViewRepository) *MockTranslationViewRepository {
	mock := &MockTranslationViewRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
