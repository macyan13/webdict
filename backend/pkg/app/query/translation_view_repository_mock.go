// Code generated by mockery v2.23.1. DO NOT EDIT.

package query

import mock "github.com/stretchr/testify/mock"

// mockery --name=TranslationViewRepository --filename=translation_view_repository_mock.go --output=./ --structname=MockTranslationViewRepository --inpackage
// MockTranslationViewRepository is an autogenerated mock type for the TranslationViewRepository type
type MockTranslationViewRepository struct {
	mock.Mock
}

// GetLastViewsBySourcePart provides a mock function with given fields: authorID, langID, sourcePart, pageSize, page
func (_m *MockTranslationViewRepository) GetLastViewsBySourcePart(authorID string, langID string, sourcePart string, pageSize int, page int) (LastTranslationViews, error) {
	ret := _m.Called(authorID, langID, sourcePart, pageSize, page)

	var r0 LastTranslationViews
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, string, int, int) (LastTranslationViews, error)); ok {
		return rf(authorID, langID, sourcePart, pageSize, page)
	}
	if rf, ok := ret.Get(0).(func(string, string, string, int, int) LastTranslationViews); ok {
		r0 = rf(authorID, langID, sourcePart, pageSize, page)
	} else {
		r0 = ret.Get(0).(LastTranslationViews)
	}

	if rf, ok := ret.Get(1).(func(string, string, string, int, int) error); ok {
		r1 = rf(authorID, langID, sourcePart, pageSize, page)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLastViewsByTags provides a mock function with given fields: authorID, langID, pageSize, page, tagIds
func (_m *MockTranslationViewRepository) GetLastViewsByTags(authorID string, langID string, pageSize int, page int, tagIds []string) (LastTranslationViews, error) {
	ret := _m.Called(authorID, langID, pageSize, page, tagIds)

	var r0 LastTranslationViews
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, int, int, []string) (LastTranslationViews, error)); ok {
		return rf(authorID, langID, pageSize, page, tagIds)
	}
	if rf, ok := ret.Get(0).(func(string, string, int, int, []string) LastTranslationViews); ok {
		r0 = rf(authorID, langID, pageSize, page, tagIds)
	} else {
		r0 = ret.Get(0).(LastTranslationViews)
	}

	if rf, ok := ret.Get(1).(func(string, string, int, int, []string) error); ok {
		r1 = rf(authorID, langID, pageSize, page, tagIds)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLastViewsByTargetPart provides a mock function with given fields: authorID, langID, targetPart, pageSize, page
func (_m *MockTranslationViewRepository) GetLastViewsByTargetPart(authorID string, langID string, targetPart string, pageSize int, page int) (LastTranslationViews, error) {
	ret := _m.Called(authorID, langID, targetPart, pageSize, page)

	var r0 LastTranslationViews
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, string, int, int) (LastTranslationViews, error)); ok {
		return rf(authorID, langID, targetPart, pageSize, page)
	}
	if rf, ok := ret.Get(0).(func(string, string, string, int, int) LastTranslationViews); ok {
		r0 = rf(authorID, langID, targetPart, pageSize, page)
	} else {
		r0 = ret.Get(0).(LastTranslationViews)
	}

	if rf, ok := ret.Get(1).(func(string, string, string, int, int) error); ok {
		r1 = rf(authorID, langID, targetPart, pageSize, page)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRandomViews provides a mock function with given fields: authorID, langID, tagIds, limit
func (_m *MockTranslationViewRepository) GetRandomViews(authorID string, langID string, tagIds []string, limit int) (RandomViews, error) {
	ret := _m.Called(authorID, langID, tagIds, limit)

	var r0 RandomViews
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, []string, int) (RandomViews, error)); ok {
		return rf(authorID, langID, tagIds, limit)
	}
	if rf, ok := ret.Get(0).(func(string, string, []string, int) RandomViews); ok {
		r0 = rf(authorID, langID, tagIds, limit)
	} else {
		r0 = ret.Get(0).(RandomViews)
	}

	if rf, ok := ret.Get(1).(func(string, string, []string, int) error); ok {
		r1 = rf(authorID, langID, tagIds, limit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetView provides a mock function with given fields: id, authorID
func (_m *MockTranslationViewRepository) GetView(id string, authorID string) (TranslationView, error) {
	ret := _m.Called(id, authorID)

	var r0 TranslationView
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (TranslationView, error)); ok {
		return rf(id, authorID)
	}
	if rf, ok := ret.Get(0).(func(string, string) TranslationView); ok {
		r0 = rf(id, authorID)
	} else {
		r0 = ret.Get(0).(TranslationView)
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(id, authorID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewMockTranslationViewRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockTranslationViewRepository creates a new instance of MockTranslationViewRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockTranslationViewRepository(t mockConstructorTestingTNewMockTranslationViewRepository) *MockTranslationViewRepository {
	mock := &MockTranslationViewRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
