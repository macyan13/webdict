// Code generated by mockery v2.14.0. DO NOT EDIT.

package auth

import (
	mock "github.com/stretchr/testify/mock"

	time "time"
)

// mockTokener is an autogenerated mock type for the mockTokener type
type mockTokener struct {
	mock.Mock
}

// generateToken provides a mock function with given fieldsFn: email, expiresAt
func (_m *mockTokener) generateToken(email string, expiresAt time.Time) (string, error) {
	ret := _m.Called(email, expiresAt)

	var r0 string
	if rf, ok := ret.Get(0).(func(string, time.Time) string); ok {
		r0 = rf(email, expiresAt)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, time.Time) error); ok {
		r1 = rf(email, expiresAt)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// parseToken provides a mock function with given fieldsFn: signedToken
func (_m *mockTokener) parseToken(signedToken string) (*JWTClaim, error) {
	ret := _m.Called(signedToken)

	var r0 *JWTClaim
	if rf, ok := ret.Get(0).(func(string) *JWTClaim); ok {
		r0 = rf(signedToken)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*JWTClaim)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(signedToken)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTnewTokener interface {
	mock.TestingT
	Cleanup(func())
}

// newTokener creates a new instance of mockTokener. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func newTokener(t mockConstructorTestingTnewTokener) *mockTokener {
	mock := &mockTokener{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
